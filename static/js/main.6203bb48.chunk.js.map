{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReverse","NONE","sortType","setSortType","sortedGoods","goods","visibleGoods","LENGTH","sort","goodA","goodB","length","ALPABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAmCC,oBAAkB,GAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA7BD,SACLC,EACAH,EACAH,GAEA,IAAMO,EAAY,YAAOD,GAEzB,OAAQH,GACN,KAAKP,EAASY,OACZD,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,UACzD,MACF,KAAKhB,EAASiB,QACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,cAAcH,MAU5D,OAJIX,GACFO,EAAaQ,UAGRR,EAOaS,CAAkBnB,EAAiBM,EAAUH,GAWjE,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYhB,IAAaP,EAASiB,UAEpCO,QAZW,WACjBhB,EAAYR,EAASiB,UAMjB,iCAUA,wBACEK,KAAK,SACLD,UAAWE,IAAW,SAAU,aAC9B,CAAE,WAAYhB,IAAaP,EAASY,SACtCY,QAAS,kBAAMhB,EAAYR,EAASY,SAJtC,4BASA,wBACEU,KAAK,SACLD,UAAWE,IAAW,SAAU,aAC9B,CAAE,YAAanB,IACjBoB,QAAS,kBAAMnB,GAAcD,IAJ/B,qBAQEG,IAAaP,EAASM,MAAQF,EAE5B,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QA5CO,WACjBhB,EAAYR,EAASM,MACrBD,GAAa,IAuCL,mBAQA,QAGN,6BACGI,EAAYgB,KAAI,SAACC,GAAD,OACf,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC1GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6203bb48.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.LENGTH:\n      visibleGoods.sort((goodA, goodB) => goodA.length - goodB.length);\n      break;\n    case SortType.ALPABET:\n      visibleGoods.sort((goodA, goodB) => goodA.localeCompare(goodB));\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReverse] = useState<boolean>(false);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n\n  const sortedGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  const resetState = () => {\n    setSortType(SortType.NONE);\n    setIsReverse(false);\n  };\n\n  const sortByName = () => {\n    setSortType(SortType.ALPABET);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPABET,\n          })}\n          onClick={sortByName}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success',\n            { 'is-light': sortType !== SortType.LENGTH })}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning',\n            { 'is-light': !isReversed })}\n          onClick={() => setIsReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n        {(sortType !== SortType.NONE || isReversed)\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetState}\n            >\n              Reset\n            </button>\n          )\n          : null}\n      </div>\n\n      <ul>\n        {sortedGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}